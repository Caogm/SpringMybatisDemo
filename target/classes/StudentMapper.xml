<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 使用dao方式，随便设置namespace名称 -->
 	 <!-- <mapper namespace="test">	 -->
 	<!-- 使用mapper代理方式，需要用mapper接口的全限定名-->
 <mapper namespace="com.springmybatis.mapper.StudentMapper"> 

	<resultMap type="Student" id="StudentResult">
		<id 	property="studId" column="stud_id"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="dob" column="dob"/>
	</resultMap>
  
  <!-- id:标识一个statement -->
  	<select id="findAllStudents" resultMap="StudentResult">
    	select * from Students
  	</select>
  	<!-- 根据id查询用户信息 -->
	<!-- 
		id：唯一标识 一个statement
		#{}：表示 一个占位符，如果#{}中传入简单类型的参数，#{}中的名称随意
		parameterType：输入 参数的类型，通过#{}接收parameterType输入 的参数
		resultType：输出结果 类型，不管返回是多条还是单条，指定单条记录映射的pojo类型
	 -->
  	<select id="findStudentById" parameterType="int" resultType="Student">
    	select stud_id as studId, name, email, dob from Students where stud_id=#{studId}
  	</select>
  	<select id="findAllStudent" parameterType="String" resultType="com.springmybatis.pojo.Student">
  		select * from students where name like '%${value}%'
  	</select>
  	
  	<insert id="insertStudent" parameterType="Student">
  		INSERT INTO STUDENTS(NAME,EMAIL,DOB) VALUES(#{name},#{email},#{dob})
  	</insert>
  	
  	<update id="updateStudent" parameterType="Student">
  		UPDATE STUDENTS SET NAME=#{name}, EMAIL=#{email}, DOB=#{dob} WHERE STUD_ID=#{stud_id}
  	</update>
  	
  	<delete id="deleteStudentById" parameterType="int">
  		DELETE FROM students WHERE stud_id=#{stud_id};
  	</delete>
</mapper>

